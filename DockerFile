
#stage 1
FROM golang:latest as build-go
WORKDIR /stg/back
COPY ./back/ .
RUN go mod download

ENV GO111MODULE="on" \
    GOARCH="amd64" \
    GOOS="linux" \
    CGO_ENABLED="0"

RUN apt-get update \
    && apt-get install -y \
    make \
    vim \
    build-essential

RUN apt-get clean \
    && apt-get remove   

RUN make goprod

#stage 2
#FROM node:latest as node
#WORKDIR /app
#COPY  ./front .
#RUN npm install
#RUN npm run build --prod
#RUN npm run build




#WORKDIR /stg/front
#RUN npm install -g @angular/cli 
#COPY ./front/ .

FROM alpine:latest

ENV ARANGO_VERSION 3.9.2
ENV ARANGO_URL https://download.arangodb.com/arangodb39/DEBIAN/amd64
ENV ARANGO_PACKAGE arangodb3_${ARANGO_VERSION}-1_amd64.deb
ENV ARANGO_PACKAGE_URL ${ARANGO_URL}/${ARANGO_PACKAGE}
ENV ARANGO_SIGNATURE_URL ${ARANGO_PACKAGE_URL}.asc

# see
#   https://www.arangodb.com/docs/3.9/programs-arangod-server.html#managing-endpoints
#   https://www.arangodb.com/docs/3.9/programs-arangod-log.html

RUN apk add --no-cache openrc npm gnupg pwgen binutils numactl numactl-tools nodejs yarn nginx curl && \
    yarn global add foxx-cli@2.0.1 && \
    apk del yarn && \
    gpg --batch --keyserver keys.openpgp.org --recv-keys CD8CB0F1E0AD5B52E93F41E7EA93F5E56E751E9B && \
    mkdir /docker-entrypoint-initdb.d && \
    cd /tmp                                && \
    wget ${ARANGO_SIGNATURE_URL}           && \
    wget ${ARANGO_PACKAGE_URL}             && \
    gpg --verify ${ARANGO_PACKAGE}.asc     && \
    ar x ${ARANGO_PACKAGE} data.tar.gz     && \
    tar -C / -x -z -f data.tar.gz          && \
    sed -ri \
    -e 's!127\.0\.0\.1!0.0.0.0!g' \
    -e 's!8529!50001!g' \
    -e 's!^(file\s*=\s*).*!\1 -!' \
    -e 's!^\s*uid\s*=.*!!' \ 
    /etc/arangodb3/arangod.conf        && \
    chgrp -R 0 /var/lib/arangodb3 /var/lib/arangodb3-apps && \
    chmod -R 775 /var/lib/arangodb3 /var/lib/arangodb3-apps && \
    rm -f /usr/bin/foxx && \
    rm -f ${ARANGO_PACKAGE}* data.tar.gz && \
    apk del gnupg
# Note that Openshift runs containers by default with a random UID and GID 0.
# We need that the database and apps directory are writable for this config.

ENV GLIBCXX_FORCE_NEW=1


#Aragnod DB
VOLUME ["/var/lib/arangodb3", "/var/lib/arangodb3-apps"]
COPY docker/arangodb/docker-entrypoint.sh /entrypoint.sh
COPY docker/arangodb/docker-foxx.sh /usr/bin/foxx

#backend
COPY --from=build-go /stg/back /stg/back


# Frontend
#COPY --from=node /app/dist/Angular13JwtAuth /usr/share/nginx/html
#COPY docker/nginx/nginx.conf /etc/nginx/

WORKDIR /
COPY ./docker/launch.sh .

EXPOSE 50001
EXPOSE 50002
EXPOSE 50003

ENTRYPOINT ["tail", "-f", "/dev/null"]
#CMD [ "./launch.sh" ]
#CMD ["ls"]

#CMD ["arangod"]



#ENTRYPOINT ["/entrypoint.sh"]


# Use the official Debian slim image for a lean production container.
# https://hub.docker.com/_/debian
# https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-builds
#FROM debian:buster-slim
#RUN set -x && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
#    ca-certificates && \
#    rm -rf /var/lib/apt/lists/*


